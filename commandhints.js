var commandHints = {

	"forward": "forward :steps \nMove forward",
	"fd": "fd :steps \nMove forward ",
	"back": "back :steps \nMove backwards ",
	"bk": "bk :steps \nMove backwards ",
	"right": "right :degrees\nTurn right ",
	"rt": "rt :degrees \nTurn right ",
	"left": "left :degrees\nTurn left ",
	"lt": "lt :degrees\n Turn left ",
	"up": "up :degrees \nTurn upwards (pitch) ",
	"down": "down :degrees\nTurn downwards (pitch) ",
	"dn": "dn :degrees\nTurn downwards (pitch) ",
	"roll_right": "roll_right :degrees ",
	"rr": "rr :degrees\n Roll right",
	"roll_left": "roll_left :degrees ",
	"rl": "rl :degrees \nRoll left ",
	"home": "Move to initial position",
	"setx": "setx :x \nMove to a specific x coordinate ",
	"sety": "setx :y \nMove to a specific y coordinate ",
	"setz": "setx :z \nMove to a specific z coordinate ",
	"setxyz": "setxyz :x :y :z \nMove to a specific point in space",
	"penup": "Stop leaving trail ",
	"pu": "Stop leaving trail ",
	"pendown": "Start leaving trail ",
	"pd": "Start leaving trail ",
	"showturtle": "Show the avatar ",
	"st": "Show the avatar ",
	"hideturtle": "Hide the avatar ",
	"ht": "Hide the avatar ",
	"setpensize": "setpensize :pixels \nSet the width of the trail",
	"sps": "sps :pixels \nSet the width of the trail",
	"settextsize": "settextsize :pixels \nSet the heigth of the text labels ",
	"sts": "sts :pixels \nSet the heigth of the text labels ",
	"color": "color :r :g :b (0-255)\nSet the drawing color in RGB space ",
	"colorhsb": "color :h(0-255) :s(0-100) :b(0-100)\nSet the drawing color in HSB space  ",
	"coloralpha": "coloralpha :alpha(0-255)\nSet the opacity of the drawing ",
	"getx": "Returns the x coordinate of the avatar ",
	"gety": "Returns the y coordinate of the avatar  ",
	"getz": "Returns the z coordinate of the avatar  ",
	"print": "print :val\nPrints a value to the console ",
	"label": "label :val\nDraws text on the drawing  ",
	"and": "and :a :b \nLogical AND operator ",
	"or": "or :a :b \nLogical OR operator  ",
	"not": "not :a\nLogical inversion ",
	"rand": "rand :maxvalue\n Returns a random number in range [0-maxvalue). Same number series for each execution frame",
	"random": "random :maxvalue\n Returns a random number in range [0-maxvalue). Same number series for each execution frame",
	"randcrazy": "randcrazy :maxvalue\n Returns a random number in range [0-maxvalue), different for each frame  ",
	"randomcrazy": "randomcrazy :maxvalue\n Returns a random number in range [0-maxvalue), different for each frame   ",
	"sqrt": "sqrt :value \nSquare root ",
	"power": "power :base :exponent\n Raise to power ",
	"pow": "pow :base :exponent\n Raise to power ",
	"modulo": "modulo :D :d\nRemainder of D/d division",
	"mod": "mod :D :d\nRemainder of D/d division ",
	"cos": "cos :degrees\nCosine ",
	"sin": "sin :degrees\nSine  ",
	"tan": "tan :degrees\nTangent   ",
	"arccos": "arccos :val\nInverse cosine, Returns degrees",
	"arcsin": "arcsin :val\nInverse sine, Returns degrees    ",
	"arctan": "arctan :val\nInverse tangent, Returns degrees ",
	"ln": "Natural logarithm ",
	"log": "Base 10 logarithm ",
	"exp": "exp :n\n Returns the constant e raised to n ",
	"pi": "The pi constant ",
	"time": "The current execution time in seconds, since Run was pressed ",
	"frame": "The current number of frames drawn since Run was pressed ",
	"int": "Convert to nearest int ",
	"round": "Convert to nearest int  ",
	"trunc": "Truncate integer part",
	"abs": "Absolute value ",
	"min": "min :a :b\n Selects the min of two values ",
	"max": "max :a :b\n Selects the max of two values  ",
	"beginface": "Starts drawing a face edge ",
	"endface": "Complete the drawing of a solid object face ",
	"mousex": "The X coordinate of the mouse position  ",
	"mousey": "The Y coordinate of the mouse position   ",
	"mousepressed": "Returns the mouse button state. 0: not pressed, 1: left button, 2: right button, 3: middle button ",
	"thing": "thing \"varname\nThe value of a variable ",
	"valueof": "valueof \"varname\nThe value of a variable  ",
	"increment": "increment \"varname\nIncrements a variable by 1 ",
	"decrement": "decrement \"varname\nDecrements a variable by 1 ",
	"point": "Draws a point at the current avatar position ",
	"dist": "dist :x :y :z \nReturns the distance between the avatar and a specified point in space ",
	"radtodeg": "Convert rads to degrees ",
	"degtorad": "Convert degrees to rads ",
	"word": "word \"a \"b\nConcatenates two values as a literal",
	"arc": "arc :angle :radius\nDraws an arc with center the avatar position. The angle of the arc starts at the y axis of the avatar and is drawn clockwise. Avatar does not move ",
	"box": "box :sidelength\nDraws a solid box ",
	"sphere": "sphere :radius \nDraws a solid sphere",
	"cylinder": "cylinder :radius :height\nDraws a solid cylinder ",
	"cone": "cone :baseradius :height\nDraws a solid cone ",
	"torus": "torus :radius :tubeRadius\nDraws a solid torus ",
	"ellipsoid": "ellipsoid :radiusX :radiusY :radiusZ\n Draws a solid ellipsoid ",
	"model": "model \"name :size\nDraws an imported 3D object object, sized to fit inside a cube of side length :size",
	"image": "image \"name :height\nDraws an imported image ",
	"sound_play": "sound_play \"name\nStarts/Resumes a sound clip",
	"sound_stop": "sound_stop \"name\nStops a sound clip ",
	"sound_pause": "sound_pause \"name\nPauses a sound clip ",
	"sound_isplaying": "sound_isplaying \"name\nReturns 1 if sound clip is currently playing",
	"sound_settime": "sound_settime \"name :sec\nSets the current playing time to a specified second ",
	"sound_setvolume": "sound_setvolume \"name :vol(0-100)\nSets the volume level of sound clip ",
	"sound_gettime": "sound_gettime \"name\nGets the current playing second of sound clip ",
	"sound_getvolume": "sound_getvolume \"name\nGets the volume setting (0-100) of sound clip ",
	"keypressed": "Returns the keycode of currently keyboard key pressed or 0 if none ",
	"equals": "equals :a :b\nCompares values of numbers or literals or both",
	"make": "make \"varname :value\nCreate a variable in local or global scope ",
	"static": "static \"varname :value\nCreate a variable with static lifetime ",
	"if": "if :condition [code] \nConditional execution ",
	"ifelse": "ifelse :condition [code if true][code if false]\nConditional execution",
	"repeat": "repeat :times [code]\nLoop execution ",
	"repcount": "Number of current execution of innermost repeat block (starts from 1). 0 if no loop is being executed ",
	"while": "while :condition [code]\nLoop execution",
	"until": "until :condition [code]\nLoop execution",
	"to": "function definition ",
	"end": "end of function ",
	"return" : "return :val\nReturns a value from a function or stops main program execution (if used outside of a function and without any argument)"

}


function showHoverHint(event){
	var x = event.pageX;
  var y = event.pageY;

  var ch = myCodeMirror.coordsChar({left: x, top: y}, "page");
  var token = myCodeMirror.getTokenAt(ch);
  if (token.type &&(token.type.match(/^(keyword|command|move)$/))){
  	//alert(token.string);
  	var el = document.createElement("div");
  	el.innerText = commandHints[token.string];
  	el.style.top = (y + 20) + 'px';
    el.style.left = (x + 20) + 'px';
    el.style.position = "fixed";
    el.style.fontSize = "12";
    document.getElementById("sourceCodeContainer").appendChild(el);
  }

}