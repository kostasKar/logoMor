;--------TETRIS---------------- 
; play with the keyboard arrows 
;------------------------------ 
 
;returns the relative coordinate of a specific box of a tetromino 
;shape: 1-7 the different tetrominos 
;orient: 0-3 the different orientations 
;boxnum: 1-4 selects a specific box of the shape - all shapes consist of 4 boxes 
;xory: 1 for the X coordinate, 0 for the Y 
to getboxcoordinate :shape :orient :boxnum :xory   
   
  if :shape = 1[ ;square tetromino 
    if :boxnum = 1 [make "x 0 make "y 0] 
    if :boxnum = 2 [make "x 0 make "y 1] 
    if :boxnum = 3 [make "x 1 make "y 1] 
    if :boxnum = 4 [make "x 1 make "y 0] 
    ifelse :xory [return :x][return :y] ;do not rotate the square 
  ] 
  if :shape = 2[ ;straight tetromino 
    if :boxnum = 1 [make "x 0 make "y -1] 
    if :boxnum = 2 [make "x 0 make "y 0] 
    if :boxnum = 3 [make "x 0 make "y 1] 
    if :boxnum = 4 [make "x 0 make "y 2] 
  ] 
  if :shape = 3[ ;T-teromino 
    if :boxnum = 1 [make "x 0 make "y -1] 
    if :boxnum = 2 [make "x 0 make "y 0] 
    if :boxnum = 3 [make "x 0 make "y 1] 
    if :boxnum = 4 [make "x 1 make "y 0] 
  ] 
  if :shape = 4[ ;L-tetromino 
    if :boxnum = 1 [make "x 0 make "y -1] 
    if :boxnum = 2 [make "x 0 make "y 0] 
    if :boxnum = 3 [make "x 0 make "y 1] 
    if :boxnum = 4 [make "x 1 make "y -1] 
  ] 
  if :shape = 5[ ;mirrored L-tetromino 
    if :boxnum = 1 [make "x 0 make "y -1] 
    if :boxnum = 2 [make "x 0 make "y 0] 
    if :boxnum = 3 [make "x 0 make "y 1] 
    if :boxnum = 4 [make "x -1 make "y -1] 
  ] 
  if :shape = 6[ ;S-tetromino 
    if :boxnum = 1 [make "x 0 make "y -1] 
    if :boxnum = 2 [make "x 0 make "y 0] 
    if :boxnum = 3 [make "x -1 make "y 0] 
    if :boxnum = 4 [make "x -1 make "y 1] 
  ] 
  if :shape = 7[ ;mirrored S-tetromino 
    if :boxnum = 1 [make "x 0 make "y -1] 
    if :boxnum = 2 [make "x 0 make "y 0] 
    if :boxnum = 3 [make "x 1 make "y 0] 
    if :boxnum = 4 [make "x 1 make "y 1] 
  ] 
  return rotatecoordinate :x :y :orient :xory  
end 
 
;applies the rotation to the shape 
to rotatecoordinate :x :y :orient :xory 
  if :orient = 0 [ifelse :xory [return :x][return :y]] 
  if :orient = 1 [ifelse :xory [return :y][return -:x]] 
  if :orient = 2 [ifelse :xory [return -:x][return -:y]] 
  if :orient = 3 [ifelse :xory [return -:y][return :x]] 
end 
 
to shapegenerator :s :o 
  setcolor :s 
  make "x0 getx 
  make "y0 gety 
  repeat 4 [ 
    pu setxyz :x0 + :d * getboxcoordinate :s :o repcount 1 :y0 + :d * getboxcoordinate :s :o repcount 0 0 pd box :d  
  ] 
end 
 
to setcolor :s 
  colorhsb (mod :s 7)*(360/7) :colorsaturation 100 
end 
 
to getrandomshape  
  return (randcrazy 7)  + 1 
end 
 
to getrandomentrypoint  
  return (randcrazy :width - 2) + 2 
end 
 
to checkpositiony 
  static "previoustime time 
  if time - :previoustime > :dt [ 
    decrement "ypos 
    make "previoustime time 
  ] 
end 
 
to checkkeyboard 
  static "upkeyalreadypressed 0 
  static "sidekeyalreadypressed 0 
  static "previouskeytime 0
  static "delay 0
  
  ifelse not keypressed [
    make "upkeyalreadypressed 0
    make "sidekeyalreadypressed 0
    make "delay 0
  ][
    ;up separate pressings
    if and keypressed = 38 not :upkeyalreadypressed[  
      make "currentorientation  mod (:currentorientation + 1) 4 
      if shapeinterferes [ 
        trywallkick
      ] 
      make "upkeyalreadypressed 1
      stop
    ]
    ;right continuous with delay. Larger delay for initial press 
    if and keypressed = 39 time - :previouskeytime >= :delay [ 
      make "xpos min :xpos + 1 :width 
      if shapeinterferes [ 
        decrement "xpos 
        stop
      ] 
      make "previouskeytime time
      ifelse :sidekeyalreadypressed [make "delay :keydelay][make "delay :keyfirstdelay]
      make "sidekeyalreadypressed 1 
      stop
    ] 
    ;left continuous with delay. Larger delay for initial press
    if and keypressed = 37 time - :previouskeytime >= :delay [
      make "xpos max :xpos - 1 0 
      if shapeinterferes [ 
        increment "xpos 
        stop
      ] 
      make "previouskeytime time
      ifelse :sidekeyalreadypressed [make "delay :keydelay][make "delay :keyfirstdelay]
      make "sidekeyalreadypressed 1
      stop
    ]
    ;down continuous without delay
    if keypressed = 40 [ 
      decrement "ypos 
      if shapeinterferes [ 
        increment "ypos 
      ] 
      stop
    ] 
    
  ]
  
end 

to trywallkick 
  if :wallkickright [
    repeat 2 [
      decrement "xpos
      if not shapeinterferes [stop]
    ]
    make "xpos :xpos + 2
  ]
  if :wallkickleft [
    repeat 2 [
      increment "xpos
      if not shapeinterferes [stop]
    ]
    make "xpos :xpos - 2
  ]
  make "currentorientation  mod (:currentorientation + 3) 4 
end
 
to drawcurrentshape 
  pu  
  setxyz :d * :xpos :d * :ypos 0 
  pd 
  shapegenerator :currentshape :currentorientation 
end 
 
to drawnextshape  
  pu 
  setxyz -:d*4 :height*:d 0 
  pd 
  shapegenerator :nextshape 0 
end 
 
to bringnew 
  make "xpos getrandomentrypoint 
  make "ypos :height 
  make "currentshape :nextshape 
  make "nextshape getrandomshape 
  make "currentorientation 0 
end 
 
to constructarray 
  repeat :width [ 
    make "w repcount 
    repeat :height + 5 [ 
      static boxvariable :w repcount 0 
    ] 
  ] 
end 
 
to boxvariable :x :y 
  return word word word "p :x "_ :y 
end 
 
to boxvalue :x :y 
  if :y < 1 [return 10] 
  if :x > :width [make "wallkickright 1 return 10] 
  if :x < 1 [make "wallkickleft 1 return 10]   
  return thing boxvariable :x :y 
end 
 
to shapetouched  
  repeat 4 [ 
    if boxvalue :xpos + getboxcoordinate :currentshape :currentorientation repcount 1 :ypos + (getboxcoordinate :currentshape :currentorientation repcount 0) - 1 [return 1] 
  ] 
  return 0 
end 
 
to place :x :y 
  if :y = :height [make "gameover 1] 
  make boxvariable :x :y :currentshape 
end 
 
to shapeplace 
  repeat 4 [ 
    place :xpos + getboxcoordinate :currentshape :currentorientation repcount 1 :ypos + getboxcoordinate :currentshape :currentorientation repcount 0 
  ] 
end 
 
to drawplacedshapes  
  repeat :width [ 
    make "x repcount 
    repeat :height [ 
      make "y repcount 
      if boxvalue :x :y [ 
        if not :gameover [setcolor boxvalue :x :y] 
        pu 
        setxyz :x*:d :y*:d 0 
        pd 
        box :d  
      ] 
    ] 
  ] 
end 
 
to shapeinterferes  
  repeat 4[ 
    if boxvalue :xpos + getboxcoordinate :currentshape :currentorientation repcount 1 :ypos + getboxcoordinate :currentshape :currentorientation repcount 0 [return 1] 
  ] 
  return 0 
end 
 
to clearrow :r 
  until :r > :height [ 
    repeat :width [ 
      make boxvariable repcount :r thing boxvariable repcount :r + 1
    ] 
  increment "r     
  ] 
end 
 
to checkforfullrows 
  make "r :ypos + 2 
  until :r < :ypos - 2 [ 
    make "foundempty 0 
    repeat :width [ 
      if not boxvalue repcount :r [ 
        make "foundempty 1 
        break
      ] 
    ]
    if not :foundempty [ 
      clearrow :r 
      increment "score 
    ] 
    decrement "r 
    if not :r [break]
  ] 
end 
 
 
 
to drawborders 
  color 255 255 255 
  pu  
  setxyz :d/2 :d/2 (0)  
  pd  
  fd :height*:d  
  bk :height*:d  
  rt 90  
  fd :width*:d  
  lt 90  
  fd :height*:d 
  pu 
end 
 
to drawscore 
  pu  
  setxyz -5*:d :d  0  
  pd 
  color 200 200 200 
  label word "score\s :score 
end 
 
to dogameover  
  color 100 100 100 
  drawplacedshapes 
  drawscore 
  pu 
  settextsize 30 
  setxyz 0 :height*:d/2 2*:d 
  color 255 255 255 
  label "game\sover 
end 
 
 
 
;global and static variables 
make "width 10 
make "height 25 
make "d 10 
make "dt 0.5 
make "keyfirstdelay 0.1
make "keydelay 0.04 
make "colorsaturation 50 
make "wallkickright 0
make "wallkickleft 0
 
static "score 0 
static "gameover 0 
static "xpos getrandomentrypoint 
static "ypos :height 
static "currentshape getrandomshape 
static "nextshape getrandomshape 
static "currentorientation 0 
 
 
;main game loop 
static "once 1
if :once [ 
  constructarray 
  make "once 0 
]
ht 
if :gameover [ dogameover return ] 
checkpositiony 
checkkeyboard 
if shapetouched [ shapeplace checkforfullrows bringnew] 
drawcurrentshape 
drawplacedshapes 
drawscore 
drawborders 
drawnextshape